import telebot
from telebot import types
from weather import get_city_ind
from weather import get_weather
from setup_tables import main_setup
from dotenv import load_dotenv
import os
import schedule
import time
import threading
from sql_functions import *

BOT_TIMEZONE = 5

main_setup()

load_dotenv()
TOKEN = os.getenv('TOKEN')
sqlite_file = os.getenv('SQLITE_FILE')

bot = telebot.TeleBot(TOKEN)

print('Bot started')

@bot.message_handler(commands=['reset'])
def reset(message):
    conn = sqlite3.connect(sqlite_file)
    reset_user_data(conn, message)
    conn.close()

@bot.message_handler(commands=['stop'])
def stop(message):
    conn = sqlite3.connect(sqlite_file)
    is_running = select_is_running(conn, message)
    if is_running[0] is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.')
        return
    if is_running[0] == 0:
        bot.send_message(message.chat.id, '–í–∞—à –±–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
        return
    update_is_running_to_stop(conn, message)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.", callback_data="continue"))
    bot.send_message(message.chat.id, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ /continue', reply_markup=markup)
    conn.close()

@bot.message_handler(commands=['continue'])
def continue_work(message):
    conn = sqlite3.connect(sqlite_file)
    is_running = select_is_running(conn, message)
    if is_running[0] is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.')
        return
    if is_running[0] == 1:
        bot.send_message(message.chat.id, '–í–∞—à –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.')
        return
    update_is_running_to_continue(conn, message)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.", callback_data="stop"))
    bot.send_message(message.chat.id, '–ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ /stop', reply_markup=markup)
    conn.close()

@bot.message_handler(commands=['view'])
def view(message):
    conn = sqlite3.connect(sqlite_file)
    is_user_message_time = select_user_message_time(conn, message)
    if is_user_message_time[0] is None:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö.')
        return
    info = select_user_view_information(conn, message)
    info_city = info[0].capitalize()
    info_time = info[1]
    info_text = f'<b>–ì–æ—Ä–æ–¥:</b> {info_city}\n<b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {info_time}'
    bot.send_message(message.chat.id, info_text, parse_mode='html')
    conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect(sqlite_file)
    user_data = select_bot_message_time(conn, message)
    if user_data is None:
        bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ù–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:')
    else:
        bot.send_message(message.chat.id,
                         '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ß—Ç–æ–±—ã –µ–≥–æ <b>–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</b>, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset', parse_mode='html')
    conn.close()

@bot.message_handler(content_types=['text'])
def send_id(message):
    conn = sqlite3.connect(sqlite_file)
    user_data = select_user_data(conn, message)
    if user_data is None:
        enter_city(conn, message)
        return
    time_zone = user_data[0]
    message_time = user_data[1]
    if message_time is None:
        enter_time(conn, message, time_zone)
    else:
        default_message(message)

    conn.close()

@bot.callback_query_handler(func=lambda call: call.data == 'view')
def view_button_click(call):
    view(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'reset')
def reset_button_click(call):
    reset(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'stop')
def stop_button_click(call):
    stop(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'continue')
def continue_work_button_click(call):
    continue_work(call.message)



def enter_city(connect, message):
    city_index = get_city_ind(connect, str.lower(message.text))
    if city_index is None:
        bot.send_message(message.chat.id,'–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Çüò¢. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏.')
        return
    weather = get_weather(city_index)
    if weather is None:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑.')
        return
    if weather[1] is None:
        bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥–∞ –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
        return
    register_user(connect, message, city_index, weather[0])
    bot.send_message(message.chat.id, f'<b>{weather[1]}</b>', parse_mode='html')
    bot.send_message(message.chat.id,'–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>–≤—Ä–µ–º—è</b>, –≤–æ —Å–∫–æ–ª—å–∫–æ –º–Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑:\n<i>(–ü—Ä–∏–º–µ—Ä: 6:00, 15:35)</i>',parse_mode='html')

def enter_time(connect, message, time_zone):
    markup = types.InlineKeyboardMarkup()
    btn_view = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µüëÄ', callback_data='view')
    btn_reset = types.InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞‚Ü™Ô∏è', callback_data='reset')
    btn_stop = types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞‚ùå', callback_data='stop')
    markup.row(btn_view)
    markup.row(btn_reset, btn_stop)
    message_time = message.text
    if not is_time(message_time):
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µüò¢, –≤—Ä–µ–º—è –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    else:
        register_time(connect, message, time_zone)
        bot.send_message(message.chat.id,
                         f'–û—Ç–ª–∏—á–Ω–æ!ü§ôüèº –Ø –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ <b>{message.text}</b>!üïî\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /stop, —á—Ç–æ–±—ã <b>–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b> —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –∏ /continue, —á—Ç–æ–±—ã <b>–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å</b> —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞',
                         reply_markup=markup, parse_mode='html')

def default_message(message):
    bot.send_message(message.chat.id, '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤–≤–µ–¥–∏—Ç–µ /stop')

def send_weather_message(city_id, user_chat_id_list):
    weather = get_weather(city_id)
    for user_chat_id in user_chat_id_list:
        bot.send_message(user_chat_id, f'<b>{weather[1]}</b>', parse_mode='html')

def run_continuously(interval=1):
    cease_continuous_run = threading.Event()

    class ScheduleThread(threading.Thread):
        @classmethod
        def run(cls):
            while not cease_continuous_run.is_set():
                schedule.run_pending()
                time.sleep(interval)

    continuous_thread = ScheduleThread()
    continuous_thread.start()
    return cease_continuous_run

def check_users_time():
    connect = sqlite3.connect('db.sqlite')
    user_records = select_users_info_with_same_time(connect)
    cities = []
    for user_city in user_records:
        user_chat_id = user_city[0]
        city_id = user_city[1]
        found = [cities_item for cities_item in cities if cities_item["city_id"] == city_id]
        if len(found) > 0:
            existing_city_users = found[0]
            existing_city_users["users"].append(user_chat_id)
        else:
            city_users = {'city_id': city_id, 'users': [user_chat_id]}
            cities.append(city_users)
    for city_data in cities:
        send_weather_message(city_data['city_id'], city_data['users'])
    connect.close()

schedule.every(1).minutes.at(':00').do(check_users_time)
run_continuously()

bot.infinity_polling()
