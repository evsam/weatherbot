from utils import is_time, to_timezone_for_bot
import telebot
from telebot import types
from weather import get_city_ind
from weather import get_weather
from setup_tables import main_setup
import sqlite3
from dotenv import load_dotenv
import os
from datetime import datetime
import schedule
import time
import traceback

BOT_TIMEZONE = 5

main_setup()

load_dotenv()
TOKEN = os.getenv('TOKEN')
bot = telebot.TeleBot(TOKEN)

print('Bot started')

def check_users_time():
    now = datetime.now()
    # current_time = now.strftime('%H:%M')
    current_time = '12:00'
    conn = sqlite3.connect('db.sqlite')
    cur = conn.cursor()
    cur.execute('SELECT user_chat_id, city_id FROM users WHERE bot_message_time = "%s"' % current_time)
    user_records = cur.fetchall()
    cities = []
    for user_city in user_records:
        user_chat_id = user_city[0]
        city_id = user_city[1]
        print("city_id", city_id)
        # found = list(filter(lambda cities_item: cities_item["city_id"] == city_id, cities))
        found = [cities_item for cities_item in cities if cities_item["city_id"] == city_id]
        print(found)
        if len(found) > 0:
            existing_city_users = found[0]
            existing_city_users["users"].append(user_chat_id)

        else:
            city_users = {'city_id': city_id, 'users': [user_chat_id]}
            cities.append(city_users)
            print(cities)


# schedule.every(1).minutes.at(':00').do(check_users_time)

# @bot.message_handler(commands=['stop'])
# def stop(message):
#     bot.send_message(message.chat.id, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ /continue')





def reset_user_data(message):
    conn = sqlite3.connect('db.sqlite')
    cur = conn.cursor()
    cur.execute("DELETE FROM users WHERE user_chat_id = %s" % message.chat.id)
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:')

@bot.message_handler(commands=['reset'])
def reset(message):
    reset_user_data(message)


@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('db.sqlite')
    cur = conn.cursor()
    cur.execute("SELECT message_time FROM users WHERE user_chat_id = '%s'" % message.chat.id)
    user_data = cur.fetchone()
    cur.close()
    conn.close()

    if user_data is None:
        bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ù–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ:')
    else:
        bot.send_message(message.chat.id,
                         '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ß—Ç–æ–±—ã –µ–≥–æ <b>–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</b>, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset', parse_mode='html')


@bot.message_handler(content_types='text')
def send_id(message):
    print(message.text)
    conn = sqlite3.connect('db.sqlite')
    cur = conn.cursor()
    cur.execute("SELECT time_zone, user_message_time FROM users WHERE user_chat_id = '%s'" % message.chat.id)
    user_data = cur.fetchone()
    cur.close()
    conn.close()

    if user_data is None:
        enter_city(message)
        return
    time_zone = user_data[0]
    message_time = user_data[1]
    if message_time is None:
        enter_time(message, time_zone)
    else:
        default_message(message)

# @bot.message_handler(func=lambda message: True)
# def default(message):
#     bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')

def enter_city(message):
    city_index = get_city_ind(str.lower(message.text))
    if city_index is not None:
        weather = get_weather(city_index)
        if weather is not None:
            if weather[1] is not None:
                register_user(message, city_index, weather[0])
                bot.send_message(message.chat.id, f'<b>{weather[1]}</b>', parse_mode='html')
                bot.send_message(message.chat.id,
                             '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>–≤—Ä–µ–º—è</b>, –≤–æ —Å–∫–æ–ª—å–∫–æ –º–Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑:\n<i>(–ü—Ä–∏–º–µ—Ä: 6:00, 15:35)</i>',
                             parse_mode='html')
            else:
                bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥–∞ –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
        else:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑.')
    else:
        bot.send_message(message.chat.id,
                         '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Çüò¢. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏.')


def enter_time(message, time_zone):
    markup = types.InlineKeyboardMarkup()
    btn_view = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µüëÄ', callback_data='view')
    btn_reset = types.InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞‚Ü™Ô∏è', callback_data='reset')
    btn_stop = types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞‚ùå', callback_data='stop')
    markup.row(btn_view)
    markup.row(btn_reset, btn_stop)
    message_time = message.text
    if not is_time(message_time):
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µüò¢, –≤—Ä–µ–º—è –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    else:
        register_time(message, time_zone)
        bot.send_message(message.chat.id,
                         f'–û—Ç–ª–∏—á–Ω–æ!ü§ôüèº –Ø –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ <b>{message.text}</b>!üïî\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /stop, —á—Ç–æ–±—ã <b>–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b> —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –∏ /continue, —á—Ç–æ–±—ã <b>–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å</b> —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞',
                         reply_markup=markup, parse_mode='html')


def default_message(message):
    try:
        check_users_time()
    except Exception:
        traceback.print_exc()

    bot.send_message(message.chat.id, '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤–≤–µ–¥–∏—Ç–µ /stop')



def register_user(message, city_index, time_zone):
    user_chat_id = message.chat.id
    conn = sqlite3.connect('db.sqlite')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (user_chat_id, city_id, time_zone) VALUES ('%s', '%s', '%s')" % (
    user_chat_id, city_index, time_zone))
    conn.commit()
    cur.close()
    conn.close()

def register_time(message, time_zone):
    user_message_time = message.text
    bot_message_time = to_timezone_for_bot(message.text, BOT_TIMEZONE, time_zone)
    conn = sqlite3.connect('db.sqlite')
    cur = conn.cursor()
    cur.execute("UPDATE users SET bot_message_time = '%s', user_message_time = '%s'" % (bot_message_time, user_message_time))
    conn.commit()
    cur.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data == 'view')
def view(call):
    conn = sqlite3.connect('db.sqlite')
    cur = conn.cursor()
    cur.execute('SELECT cities.city, users.user_message_time\
     FROM users INNER JOIN cities\
     ON users.city_id = cities.city_id AND user_chat_id = "%s"' % call.message.chat.id)
    info = cur.fetchone()
    info_city = info[0].capitalize()
    info_time = info[1]
    info_text = f'<b>–ì–æ—Ä–æ–¥:</b> {info_city}\n<b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {info_time}'
    bot.send_message(call.message.chat.id, info_text, parse_mode='html')

@bot.callback_query_handler(func=lambda call: call.data == 'reset')
def view(call):
    reset_user_data(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'stop')
def view(call):
    bot.send_message(call.message.chat.id, "stop")

def send_weather_message(city_id, user_chat_id_list):
    weather = get_weather(city_id)
    for user_chat_id in user_chat_id_list:
        bot.send_message(user_chat_id, f'<b>{weather[1]}</b>', parse_mode='html')

bot.infinity_polling()

# while True:
#     schedule.run_pending()
#     time.sleep(1)


